### Input validation

As an extension to the user input functionality, `validated_input()` allows arbitrary user-specified filters.
A "filter" is a function, which takes a string as input and returns a boolean value of whether it is valid and an optional error message.

Example:
```lua
function non_empty(s)
  if string.ulen(s) == 0 then
     return false, 'Input is empty!'
  end
  return true
end
```
This is not a particularly useful validator, as the input will not be accepted and ran through the validations if it doesn't contain anything, but it demonstrates the idea quite well.
Filters will be run line-by-line, if the input has multiple lines, the line number is also indicated when it's invalid.

#### Invoking

```lua
r = user_input()
validated_input({non_empty})
```

Validations are applied to the input by passing an array of functions. Note the lack of parentheses after the function name, we don't want to call it yet, just refer to it by name.

#### Helper functions

* `string.ulen(s)` - as opposed to the builtin `len()`, this works for unicode strings
* `string.is_upper(s)` - determine if the string is all uppercase letters (note that this is not unicode-enabled)
* `string.is_lower(s)` - determine if the string is all lowercase letters (note that this is not unicode-enabled)

#### Useful builtins

* tonumber() - for parsing numbers